Useful examples of sed, awk and grep

$ sed -i.<backupfile> '/^#/d;^$/d' <file>
-> -i.commented appends to the filename, i.e. /etc/ntp.conf.commented
-> /d is for delete; removes lines that starts with # (^#/d) commented and (^$/d) blank lines
-> delimiter is ;

$ sed -i.commented '/^#/d;/^$/d' /etc/ntp.conf
$ diff ntp.conf.commented ntp.conf

$ sed -n '1,5 p' /etc/passwd
-> suppress the standard output (-n) with lines 1 through 5:
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync

$ sed -n ' /^bin/ p' /etc/passwd
-> show the line that starts with bin in /etc/passwd:

$ sed '/^#/d; /^$/d' /etc/ntp.conf
-> This doesn't change the file. It just shows what it'll look like.
$ sed -i.bak '/^#/d; /^$/d' /etc/ntp.conf
-> This changes the file but saves it on .bak file.

Parts of awk:
============
Header: BEGIN { print "ntp.conf" }
middle part: {print}
Footer: NR (number of rows/lines)

$ awk ' BEGIN { print "ntp.conf" } {print} END {print NR}' /etc/ntp.conf
ntp.conf
-> BEGIN { print "ntp.conf" }
driftfile /var/lib/ntp/ntp.drift
statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable
server 0.ubuntu.pool.ntp.org
server 1.ubuntu.pool.ntp.org
server 2.ubuntu.pool.ntp.org
server 3.ubuntu.pool.ntp.org
server ntp.ubuntu.com
restrict -4 default kod notrap nomodify nopeer noquery
restrict -6 default kod notrap nomodify nopeer noquery
restrict 127.0.0.1
restrict ::1
-> {print}
14
-> END {print NR}

$ awk ' BEGIN {print "/etc/ntp.conf file content"} {print NR, $0} END {print NR}' /etc/ntp.conf
/etc/ntp.conf file content
1 driftfile /var/lib/ntp/ntp.drift
2 statistics loopstats peerstats clockstats
3 filegen loopstats file loopstats type day enable
4 filegen peerstats file peerstats type day enable
5 filegen clockstats file clockstats type day enable
6 server 0.ubuntu.pool.ntp.org
7 server 1.ubuntu.pool.ntp.org
8 server 2.ubuntu.pool.ntp.org
9 server 3.ubuntu.pool.ntp.org
10 server ntp.ubuntu.com
11 restrict -4 default kod notrap nomodify nopeer noquery
12 restrict -6 default kod notrap nomodify nopeer noquery
13 restrict 127.0.0.1
14 restrict ::1
14


$ ifconfig eth1|awk -F":" '/HWaddr/{print $3 $4 $5 $6 $7}'
$ ifconfig eth1|awk -F":" '/HWaddr/{print toupper($2 $3 $4 $5 $6 $7)}'|cut -d" " -f4
-> shows only the MACaddress

$ ifconfig eth1|awk -F":" '/HWaddr/{print toupper($3 $4 $5 $6 $7)}'
-> toupper prints output to uppercase

Add scripts to do the parsing for you:
$ cat parsecsv.sh 
#!/bin/bash
# put old field separator to $IFS variable
# set new field separator to , delimited
OLDIFS=$IFS
IFS=","

while read product price quantity
# tools.csv has drill(product),99(price),5(quantity) 
do
  # \e just adds color then restores default at the end
  echo -e "\e[1;33m Product: $product  
  ================ \e[0m\n\
  Price: \t $price \n\
  Quantity: \t $quantity \n"
# $1 is the first parameter which is the file tools.csv
done < $1
IFS=$OLDIFS

$ cat tools.csv 
drill,99,5
hammer,10,50
brush,5,100
lamp,25,30
screwdriver,5,23
table-saw,1099,3

$ ./parsecsv.sh tools.csv 
 Product: drill  
  ================ 
  Price: 	 99 
  Quantity: 	 5 

 Product: hammer  
  ================ 
  Price: 	 10 
  Quantity: 	 50 

 Product: brush  
  ================ 
  Price: 	 5 
  Quantity: 	 100 

 Product: lamp  
  ================ 
  Price: 	 25 
  Quantity: 	 30 

 Product: screwdriver  
  ================ 
  Price: 	 5 
  Quantity: 	 23 

 Product: table-saw  
  ================ 
  Price: 	 1099 
  Quantity: 	 3 

-A num Print num lines of trailing context AFTER matching lines.

vagrant@wikitest:~$ ./parsecsv.sh tools.csv |grep -A3 hammer
 Product: hammer  
  ================ 
  Price: 	 10 
  Quantity: 	 50 

-B num Print num lines of trailing context BEFORE matching lines.

vagrant@wikitest:~$ ./parsecsv.sh tools.csv |grep -B3 hammer
  Price: 	 99 
  Quantity: 	 5 

 Product: hammer  

-C num Print num lines of trailing context AFTER matching lines with upper case match 

vagrant@wikitest:~$ ./parsecsv.sh tools.csv |grep -C2 hammer
  Quantity: 	 5 

 Product: hammer  
  ================ 
  Price: 	 10 

REGEX

\b[Cc]olou?r\b

\b boundaries
[Cc] - small or capital C
ou? - english or american spelling

Color, color, Colour, colour

^ start of string
'^root': match lines starting with root

$ end of string
'4$': match lines ending in 4

$ grep '^server' /etc/ntp.conf
server 0.ubuntu.pool.ntp.org
server 1.ubuntu.pool.ntp.org
server 2.ubuntu.pool.ntp.org
server 3.ubuntu.pool.ntp.org
server ntp.ubuntu.com

$ grep '4$' /etc/logrotate.d/*
/etc/logrotate.d/landscape-client:    rotate 4
/etc/logrotate.d/landscape-client:    rotate 4
/etc/logrotate.d/ppp:	rotate 4
/etc/logrotate.d/puppet:  rotate 4
/etc/logrotate.d/rsyslog:	rotate 4
/etc/logrotate.d/ufw:	rotate 4

Show me the lines that are NOT empty:
$ grep -v '^$' /etc/ntp.conf.commented
-> $ is end of line marker

any letter: '[A-Za-z]'
any digit: '[/d0-9]'
any lower case letter or underscore: '[a-z_]'
matches 3, 4 or 9 or 349: '[349]'

show logrotate files containing lines ending in 4 or 6:
$ grep 'rotate [46]$' /etc/logrotate.d/*
/etc/logrotate.d/aptitude:  rotate 6
/etc/logrotate.d/landscape-client:    rotate 4
/etc/logrotate.d/landscape-client:    rotate 4
/etc/logrotate.d/ppp:	rotate 4
/etc/logrotate.d/puppet:  rotate 4
/etc/logrotate.d/rsyslog:	rotate 4
/etc/logrotate.d/ufw:	rotate 4
/etc/logrotate.d/unattended-upgrades:  rotate 6
 
show logrotate files not containing lines ending in 4:
-> the ^ inside [ ] negates the value
$ grep 'rotate [^4]$' /etc/logrotate.d/*
/etc/logrotate.d/apport:       rotate 7
/etc/logrotate.d/aptitude:  rotate 6
/etc/logrotate.d/rsyslog:	rotate 7
/etc/logrotate.d/unattended-upgrades:  rotate 6
/etc/logrotate.d/upstart:        rotate 7

search for lines starting with server (ending in white space):
$ grep '^server\s' /etc/ntp.conf
server 0.ubuntu.pool.ntp.org
server 1.ubuntu.pool.ntp.org
server 2.ubuntu.pool.ntp.org
server 3.ubuntu.pool.ntp.org
server ntp.ubuntu.com

search for plural of server (negating pattern server):
$ grep 'server\S' /etc/ntp.conf.commented 
# Specify one or more NTP servers.
# Use servers from the NTP Pool Project. Approved by Ubuntu Technical Board
# Note that "restrict" applies to both servers and clients, so a configuration
# up blocking replies from your own upstream servers.

show word boundary of pop with #s 0 thru 9:
$ grep '\bpop[0-9]\b' /etc/services
pop2		109/tcp		postoffice pop-2 # POP version 2
pop2		109/udp		pop-2
pop3		110/tcp		pop-3		# POP version 3
pop3		110/udp		pop-3

reverse search for pop:
\b matches the empty string at the beginning or end of a word.  
\B matches the empty string not at the beginning or end of a word. 
$ grep 'pop[0-9]\B' /etc/services
pop3s		995/tcp				# POP-3 over SSL
pop3s		995/udp


'u*': matches u zero or more
'u?': matches u zero or once only
'u+': matches one or more occurrences of u
'u{3}': matches exactly uuu

$ cat test 
		#start
start end
  start  end
  startend
  b
 #bb
bbb
#end
ab12 7af
a234 7ef

show lines that do not begin with blank space and anything then #:
$ grep -v '^\s*#' test
start end
  start  end
  startend
  b
bbb

show lines that are commented out:
$ grep '^\s*#' test
		#start
 #bb
#end

show lines that have start end pattern:
start \s end: \s for white space
$ grep '^\s*[start\send]' test
start end
  start  end
  startend


show lines that have start end pattern with 2 spaces in between:
$ grep -E 'start\s{2}end' test
  start  end

show lines that require 2 letters and 2 digits:
$ grep -E '[a-z]{2}[0-9]{1,2}' test
ab12 7af

$ cat employees 
Jones,Bob,232-78-3456
Jackeson,Jane,,
Federer,Jack,xxx-xx,xxxx
Maw,Michael,1879-0
Alexander,Sally,345-89-8095
Beder,Ioana,567-34-9802
Staines,Brad,,

$ grep -vE '\b[0-9]{3}-[0-9]{2}-[0-9]{4}\b' employees 
Jackeson,Jane,,
Federer,Jack,xxx-xx,xxxx
Maw,Michael,1879-0
Staines,Brad,,

$ grep -E '\b[0-9]{3}-[0-9]{2}-[0-9]{4}\b' employees 
Jones,Bob,232-78-3456
Alexander,Sally,345-89-8095
Beder,Ioana,567-34-9802

print only lines 1 thru 5:
$ sed -n '1,5 p' test
		#start
start end
  start  end
  startend
  b

print only lines 5 to the end of file:
$ sed -n '5,$ p' test
  b
 #bb
bbb
#end
ab12 7af
a234 7ef

add regex, print lines that start with a:
$ sed -n '/^a/ p' test
ab12 7af
a234 7ef

add regex, print lines that start with a and any number after that:
$ sed -n '/^a[0-9]/ p' test
a234 7ef

show number lines in a file:
$ nl parsecsv.sh.bak 
     1	#!/bin/bash
     2	# put old field separator to $IFS variable
     3	# set new field separator to , delimited
     4	OLDIFS=$IFS
     5	IFS=","
       
     6	while read product price quantity
     7	# tools.csv has drill(product),99(price),5(quantity) 
     8	do
     9	# \e just adds color then restores default at the end
    10	echo -e "\e[1;33m Product: $product  
    11	================ \e[0m\n\
    12	Price: \t $price \n\
    13	Quantity: \t $quantity \n"
    14	# $1 is the first parameter which is the file tools.csv
    15	done < $1
    16	IFS=$OLDIFS

starting at lines 9 until 14, replace the starting lines with 4 spaces, globally:
$ sed '9,14 s/^/    /g' parsecsv.sh.bak 
#!/bin/bash
# put old field separator to $IFS variable
# set new field separator to , delimited
OLDIFS=$IFS
IFS=","

while read product price quantity
# tools.csv has drill(product),99(price),5(quantity) 
    do
    # \e just adds color then restores default at the end
    echo -e "\e[1;33m Product: $product  
    ================ \e[0m\n\
    Price: \t $price \n\
    Quantity: \t $quantity \n"
# $1 is the first parameter which is the file tools.csv
done < $1
IFS=$OLDIFS

show me lines 9 thru 14 only, g becomes p:
$ sed -n '9,14 s/^/    /p' parsecsv.sh.bak 
    do
    # \e just adds color then restores default at the end
    echo -e "\e[1;33m Product: $product  
    ================ \e[0m\n\
    Price: \t $price \n\
    Quantity: \t $quantity \n"

$ grep vagrant /etc/passwd
vagrant:x:1000:1000::/home/vagrant:/bin/bash

replace /bin/bash with /bin/sh for user vagrant, just print:
$ sed -n '/^vagrant/ s@/bin/bash@/bin/sh@p' /etc/passwd
vagrant:x:1000:1000::/home/vagrant:/bin/sh

insert server ntp.example.com:
$ sed ' /^server 0/ i server ntp.example.com' /etc/ntp.conf
driftfile /var/lib/ntp/ntp.drift
statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable
server ntp.example.com
server 0.ubuntu.pool.ntp.org
server 1.ubuntu.pool.ntp.org
server 2.ubuntu.pool.ntp.org
server 3.ubuntu.pool.ntp.org
server ntp.ubuntu.com
restrict -4 default kod notrap nomodify nopeer noquery
restrict -6 default kod notrap nomodify nopeer noquery
restrict 127.0.0.1
restrict ::1

append after server 3 with ntp.example.com:
$ sed ' /^server 3/ a server ntp.example.com' /etc/ntp.conf
driftfile /var/lib/ntp/ntp.drift
statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable
server 0.ubuntu.pool.ntp.org
server 1.ubuntu.pool.ntp.org
server 2.ubuntu.pool.ntp.org
server 3.ubuntu.pool.ntp.org
server ntp.example.com
server ntp.ubuntu.com
restrict -4 default kod notrap nomodify nopeer noquery
restrict -6 default kod notrap nomodify nopeer noquery
restrict 127.0.0.1
restrict ::1

delete lines that start with server white space (\s) 0-9.ubuntu:
$ sed '/^server\s[0-9].ubuntu/d' /etc/ntp.conf
driftfile /var/lib/ntp/ntp.drift
statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable
server ntp.ubuntu.com
restrict -4 default kod notrap nomodify nopeer noquery
restrict -6 default kod notrap nomodify nopeer noquery
restrict 127.0.0.1
restrict ::1

insert server ntp.example.com before server 0 and delete all server 0-9:
$ sed ' {
> /^server 0/i server ntp.example.com
> /^server\s[0-9]/d
> } ' /etc/ntp.conf.commented

$ cat ntp.sed 
/^$/d -> deletes blank lines
/^\s*#/d -> deletes commented lines
/^server 0/ i server ntp.example.com prefer -> inserts before server 0
/^server\s[0-9].ubuntu/d -> deletes server white space 0 thru 9

$ sed -f ntp.sed /etc/ntp.conf.commented 
driftfile /var/lib/ntp/ntp.drift
statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable
server ntp.example.com prefer
server ntp.ubuntu.com
restrict -4 default kod notrap nomodify nopeer noquery
restrict -6 default kod notrap nomodify nopeer noquery
restrict 127.0.0.1
restrict ::1

$ sudo sed -i.bak -f ntp.sed /etc/ntp.conf.commented

$ sed 's/\([^,]*\)/\U\1/' employees 
JONES,Bob,232-78-3456
JACKESON,Jane,,
FEDERER,Jack,xxx-xx,xxxx
MAW,Michael,1879-0
ALEXANDER,Sally,345-89-8095
BEDER,Ioana,567-34-9802
STAINES,Brad,,

's/\([^,]*\)/\U\1/'
-> escaping the ( with \
-> [firstgrouping that's not a comma] and anything after that
-> escaping the \ again with )
-> \U\1: uppercase the first group

$ sed 's/\([^,]*\),\([^,]*\)/\U\1\L\2/' employees
            1st        2nd    upper  lower
$ sed 's/\([^,]*\),\([^,]*\)/\U\1,\L\2/' employees
                            separate output with comma

Finding the 1000:    
$ sed 's/\(^\|[^0-9.]\)\([0-9]\+\)\([0-9]\{3\}\)/\1\2,\3/g' /proc/loadavg 
-> begins with no numbers with .
-> 2nd begins with 0-9 and any number
-> 3rd group 0-9 with 3 numbers after it
-> separate first and 2nd groups with 3rd group a comma

0.00 0.01 0.05 2/85 12,916

execute ls -la infront of file.list:
$ sed 's/^/ls -la /e' file.list 
-rw-r--r-- 1 root root 215 Jun 30 21:01 /etc/hosts
-rw-r--r-- 1 root root 19558 Dec 30  2013 /etc/services

$ sed 's/^/stat /e' file.list 

$ sed 's/^/sudo useradd /e' user.list 

$ tail -n 2 /etc/passwd
gwen:x:1002:1002::/home/gwen:
monty:x:1003:1003::/home/monty:

$ sed 's/^/sudo userdel /e' user.list 

$ tail -n 2 /etc/passwd
ubuntu:x:1001:1001:Ubuntu:/home/ubuntu:/bin/bash
ntp:x:109:115::/home/ntp:/bin/false

within vim
==========
%s/stat/stuff/g
2,10s/stat/stuff/

:/^<pattern>/s/^/    /
         pattern
         
:8,$ s/^/     /
row: 8
end of file: $      

write lines n1 thru n2 to a filename:
:n1,n2 w <filename>

read a file (essentially copying content of file):
:r <filename>

$ awk -f users.awk /etc/passwd

$ cat /etc/passwd | awk 'BEGIN { FS=":"; print "Username" } { print $1 } END { print "Total Users = " NR }'

print user where UID > 499:
$ cat /etc/passwd | awk 'BEGIN { FS=":"; print "Username" } $3 > 499 { print $1 } END { print "Total Users = " NR }' 
Username
nobody
vagrant
ubuntu
Total Users = 30

counting returned rows:
-> semi-colons can be used in the begin, middle or end block to separate commands out
$ cat /etc/passwd | awk 'BEGIN { FS=":"; print "Username" } /^root/ { print $1; count++ } END { print "Total Users = " count }' 
Username
root
Total Users = 1

$ cat users.1
{ print $1 } 

add field separator:
$ awk -F":" -f users.1 /etc/passwd

$ cat users.1 
BEGIN {FS=":"; print "Username"; print "=========="} 
/^s/  { print $1; count++ }
END { print "Total users: " count }

$ awk -F"," '{print toupper($1), tolower($2), $3 } ' employees.changed 
JONES bob 232-78-3456
JACKESON jane 
FEDERER jack xxx-xx
MAW michael 1879-0
ALEXANDER sally 345-89-8095
BEDER ioana 567-34-9802
STAINES brad 

$ cat lastlog.awk
BEGIN {
printf "%8s %11s\n", "Username", "Login date"
print "====================="
}
!(/Never logged in/ || /^Username/ || /^root/) {
count++
if (NF == 8) 
# NF is number of fields (local user if 8 fields)
   printf "%8s %2s %3s %4s\n", $1,$5,$4,$8
# 8char, 2char, 3char, 4char strings then new line

# 9 fields logging from remote client
else
   printf "%8s %2s %3s %4s\n", $1,$6,$5,$9
}
END {
print "=============="
print "Total Number of Users Processed: ", count
}

$ lastlog | awk -f lastlog.awk 
Username  Login date
=====================
 vagrant 30 Jun 2017
=====================

RS = record separator

$ sed -i.new '/^\s*$/d;/^<\/Virt/a \ ' virtualhost.conf 
-> add a new line after the Virt pattern 
<VirtualHost *:80>
DocumentRoot /www/example
ServerName www.example.org
# Other directives here
</VirtualHost>
 
<VirtualHost *:80>
DocumentRoot /www/theurbanpenguin
ServerName www.theurbanpenguin.com
# Other directives here
</VirtualHost>
 
<VirtualHost *:80>
DocumentRoot /www/linuxformat
ServerName www.linuxformat.com
# Other directives here
</VirtualHost>
 
$ cat virtualhost.awk 
BEGIN { RS="\n\n"; }
#RS is record separator, which is new lines
$0 ~ search { print }
#complete line 
#~ there's a match against our search
# complete record, reference that with awk at runtime

notdef   <product>  notdef
$1           $2     $3
<name>screwdriver</name>
$4       $5        $6       
<price>5</price>
    $7 $8 $9
<stock>51</stock>
  $10  $11  $11
</product>
    $12
    
$ cat virtualhost.awk 
BEGIN { FS="[><]"; RS="\n\n"; OFS=" "; }
$0 ~ search { print $4 ": " $5, $8 ": " $9, $12 ": " $13 }

$ awk -f virtualhost.awk search=driver catalog.xml 
name: screwdriver price: 5 stock: 51

Web access logs with awk:
=========================
$ awk '$9 == 404 { print $0 } ' access.log
-> print only lines that have code 404

$ awk ' {print $1}' access.log
-> client IP

$ cat count.awk
BEGIN { FS=" "; print "Log access" }
{ip[$1]++}
-> associative array, ip with field 1, which is the IP address
END { for (i in ip)
print i, " has accessed ", ip[$1], " times."
}

example: ip[192.168.0.1]3

$9 display status code 404

BEGIN { FS=" "; print "Most Popular Browser" }
{ browser[$12]++ }
END { for (b in browswer)
if (max < browser[b]) {
       max = browser[b];
       maxbrowser = b; }
print "Most access was from ", maxbrowswer, " and ", max, " times."}
